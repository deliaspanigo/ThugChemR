mod_phantom$coef1
mod_phantom$coef1 <- paste0("\\overset{", mod_phantom$coef1, "}{",mod_phantom$coef1,"}")
mod_phantom$coef1
#######################################################
output[[6]] <- mod_phantom
##############################################################
input_obj_name02 <-  "DataTC_03_Valences"
input_folder02 <- "./data/"
input_file02 <- paste0(input_obj_name02, ".rda")
input_path02 <- paste0(input_folder02, input_file02)
load(input_path02)
dt_symbol_extra <- DataTC_03_Valences[[language]]$Symbol == chem_symbol
chem_symbol <- "H"
element_valence <- 1
gas_status_element <- TRUE
language = "esp"
language = "esp"
dt_symbol_extra <- DataTC_03_Valences[[language]]$Symbol == chem_symbol
dt_symbol_extra
dt_valencia_extra <- DataTC_03_Valences[[language]] == chem_symbol
dt_symbol_extra <- DataTC_03_Valences[[language]]$Symbol == chem_symbol
dt_valencia_extra <- DataTC_03_Valences[[language]]$SelectedValence == element_valence
dt_row <- (dt_symbol_extra + dt_valencia_extra ) == 2
dt_row
chem_symbol <- "H"
element_valence <- 1
gas_status_element <- TRUE
language = "esp"
##############################################################
input_obj_name02 <-  "DataTC_03_Valences"
input_folder02 <- "./data/"
input_file02 <- paste0(input_obj_name02, ".rda")
input_path02 <- paste0(input_folder02, input_file02)
load(input_path02)
dt_symbol_extra <- DataTC_03_Valences[[language]]$Symbol == chem_symbol
dt_valencia_extra <- DataTC_03_Valences[[language]]$SelectedValence == element_valence
dt_row <- (dt_symbol_extra + dt_valencia_extra ) == 2
##############################################################
chem_name <- DataTC_03_Valences[[language]]$Name[dt_row]
roman_number <- DataTC_03_Valences[[language]]$RomanValence[dt_row]
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
# 4) LaTeX 01: Element, Oxigen and Oxide with subindex
#    as an pack each one with special format for LaTeX
output[[4]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], "_{", output[[2]][,3], "}"),
output[[2]][4],
paste0(output[[2]][,5], "_{", output[[2]][,6], "}"),
output[[2]][7],
paste0(output[[2]][,8],  "_{", output[[2]][,9] , "}",
output[[2]][,10], "_{", output[[2]][,11], "}"))
colnames(output[[4]]) <- colnames(output[[3]])
names(output)[4] <- "Level03_LaTeX01"
# 5) Latex + Symbols ( + and arrow)
output[[5]] <- cbind.data.frame(output[[4]][c(1,2)],
rep("+", nrow(output[[4]])),
output[[4]][c(3,4)],
# rep("\rightarrow", nrow(output[[4]])),
rep("       ------>     ", nrow(output[[4]])),
output[[4]][c(5,6)])
colnames(output[[5]])[3] <- "Plus"
colnames(output[[5]])[6] <- "Arrow"
names(output)[5] <- "Level04_PlusAndArrow"
#######################################################
mod_phantom <- output[[5]]
for(k1 in 1:ncol(mod_phantom)) {
for(k2 in 1:nrow(mod_phantom)) {
# k1 <- 8
# k2 <- 3
esta_seleccion <- mod_phantom[k2, k1]
dt_0 <- grepl("0", esta_seleccion)
dt_1 <- grepl("1", esta_seleccion)
dt_algo <- sum(sum(dt_0) + sum(dt_1)) > 0
if(dt_algo){
if (dt_0) esta_seleccion <- paste0("\\phantom{", esta_seleccion, "}")
if (dt_1) esta_seleccion <- stringr::str_replace_all(string = esta_seleccion, "1", "\\\\phantom{1}")
# if (dt_1) esta_seleccion <- gsub(pattern = "1", replacement = "\\phantom{1}", x = esta_seleccion)
mod_phantom[k2, k1] <- esta_seleccion
}
}
}
#######################################################
mod_phantom$coef1 <- paste0("\\overset{", mod_phantom$coef1, "}{",mod_phantom$coef1,"}")
mod_phantom$ER <- paste0("\\overset{", mod_phantom$ER, "}{",mod_phantom$ER,"}")
mod_phantom$Plus <- paste0("\\overset{", mod_phantom$Plus, "}{",mod_phantom$Plus,"}")
mod_phantom$coef2 <- paste0("\\overset{", mod_phantom$coef2, "}{",mod_phantom$coef2,"}")
mod_phantom$OR <- paste0("\\overset{", mod_phantom$OR, "}{",mod_phantom$OR,"}")
mod_phantom$Arrow <- paste0("\\overset{", mod_phantom$Arrow, "}{",mod_phantom$Arrow,"}")
mod_phantom$coef3 <- paste0("\\overset{", mod_phantom$coef3, "}{",mod_phantom$coef3,"}")
mod_phantom$Oxyde <- paste0("\\overset{", mod_phantom$Oxyde, "}{",mod_phantom$Oxyde,"}")
mod_phantom <- output[[5]]
for(k1 in 1:ncol(mod_phantom)) {
for(k2 in 1:nrow(mod_phantom)) {
# k1 <- 8
# k2 <- 3
esta_seleccion <- mod_phantom[k2, k1]
dt_0 <- grepl("0", esta_seleccion)
dt_1 <- grepl("1", esta_seleccion)
dt_algo <- sum(sum(dt_0) + sum(dt_1)) > 0
if(dt_algo){
if (dt_0) esta_seleccion <- paste0("\\phantom{", esta_seleccion, "}")
if (dt_1) esta_seleccion <- stringr::str_replace_all(string = esta_seleccion, "1", "\\\\phantom{1}")
# if (dt_1) esta_seleccion <- gsub(pattern = "1", replacement = "\\phantom{1}", x = esta_seleccion)
mod_phantom[k2, k1] <- esta_seleccion
}
}
}
#######################################################
mod_phantom$coef1 <- paste0("\\overset{", mod_phantom$coef1, "}{",mod_phantom$coef1,"}")
mod_phantom$ER <- paste0("\\overset{", roman_number, "}{",mod_phantom$ER,"}")
mod_phantom$Plus <- paste0("\\overset{", mod_phantom$Plus, "}{",mod_phantom$Plus,"}")
mod_phantom$coef2 <- paste0("\\overset{", mod_phantom$coef2, "}{",mod_phantom$coef2,"}")
mod_phantom$OR <- paste0("\\overset{", mod_phantom$OR, "}{",mod_phantom$OR,"}")
mod_phantom$Arrow <- paste0("\\overset{", mod_phantom$Arrow, "}{",mod_phantom$Arrow,"}")
mod_phantom$coef3 <- paste0("\\overset{", mod_phantom$coef3, "}{",mod_phantom$coef3,"}")
mod_phantom$Oxyde <- paste0("\\overset{", mod_phantom$Oxyde, "}{",mod_phantom$Oxyde,"}")
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ChemFormule_Oxyde()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ChemFormule_Oxyde()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
document()
document()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
chem_symbol = "H"
element_valence = 1
gas_status_element = TRUE
language <- "esp"
input_data <- ThugChemR::PackTC_04_Oxyde[[language]]
all_oxyde <- names(input_data)
armado <- paste0("_", chem_symbol, element_valence, "_")
pos_oxyde <- grep(armado, all_oxyde)
selected_oxyde <- all_oxyde[pos_oxyde]
complite_solution <- input_data[[selected_oxyde]]
selected_resolution <- complite_solution$Level06_LaTeX02
chem_formula <- paste0("FÃ³rmula: ", complite_solution$ChemFormule_LaTeX)
nomenclatura <- complite_solution$Nomenclature_Oxyde_02
nomenclatura
chem_formula
chem_symbol <- "H"
element_valence <- 1
gas_status_element <- TRUE
language = "esp"
##############################################################
input_obj_name02 <-  "DataTC_03_Valences"
input_folder02 <- "./data/"
input_file02 <- paste0(input_obj_name02, ".rda")
input_path02 <- paste0(input_folder02, input_file02)
load(input_path02)
dt_symbol_extra <- DataTC_03_Valences[[language]]$Symbol == chem_symbol
dt_valencia_extra <- DataTC_03_Valences[[language]]$SelectedValence == element_valence
dt_row <- (dt_symbol_extra + dt_valencia_extra ) == 2
##############################################################
chem_name <- DataTC_03_Valences[[language]]$Name[dt_row]
roman_number <- DataTC_03_Valences[[language]]$RomanValence[dt_row]
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
# 4) LaTeX 01: Element, Oxigen and Oxide with subindex
#    as an pack each one with special format for LaTeX
output[[4]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], "_{", output[[2]][,3], "}"),
output[[2]][4],
paste0(output[[2]][,5], "_{", output[[2]][,6], "}"),
output[[2]][7],
paste0(output[[2]][,8],  "_{", output[[2]][,9] , "}",
output[[2]][,10], "_{", output[[2]][,11], "}"))
colnames(output[[4]]) <- colnames(output[[3]])
names(output)[4] <- "Level03_LaTeX01"
# 5) Latex + Symbols ( + and arrow)
output[[5]] <- cbind.data.frame(output[[4]][c(1,2)],
rep("+", nrow(output[[4]])),
output[[4]][c(3,4)],
# rep("\rightarrow", nrow(output[[4]])),
rep("       ------>     ", nrow(output[[4]])),
output[[4]][c(5,6)])
colnames(output[[5]])[3] <- "Plus"
colnames(output[[5]])[6] <- "Arrow"
names(output)[5] <- "Level04_PlusAndArrow"
#######################################################
mod_phantom <- output[[5]]
for(k1 in 1:ncol(mod_phantom)) {
for(k2 in 1:nrow(mod_phantom)) {
# k1 <- 8
# k2 <- 3
esta_seleccion <- mod_phantom[k2, k1]
dt_0 <- grepl("0", esta_seleccion)
dt_1 <- grepl("1", esta_seleccion)
dt_algo <- sum(sum(dt_0) + sum(dt_1)) > 0
if(dt_algo){
if (dt_0) esta_seleccion <- paste0("\\phantom{", esta_seleccion, "}")
if (dt_1) esta_seleccion <- stringr::str_replace_all(string = esta_seleccion, "1", "\\\\phantom{1}")
# if (dt_1) esta_seleccion <- gsub(pattern = "1", replacement = "\\phantom{1}", x = esta_seleccion)
mod_phantom[k2, k1] <- esta_seleccion
}
}
}
#######################################################
mod_phantom$coef1 <- paste0("\\overset{\\phantom{", mod_phantom$coef1, "}}{",mod_phantom$coef1,"}")
mod_phantom$ER <- paste0("\\overset{{", roman_number, "}_{\\phantom{3}}}{",mod_phantom$ER,"}")
mod_phantom$Plus <- paste0("\\overset{\\phantom{", mod_phantom$Plus, "}}{",mod_phantom$Plus,"}")
mod_phantom$coef2 <- paste0("\\overset{\\phantom{", mod_phantom$coef2, "}}{",mod_phantom$coef2,"}")
mod_phantom$OR <- paste0("\\overset{", "{II}_{\\phantom{3}}", "}{",mod_phantom$OR,"}")
mod_phantom$Arrow <- paste0("\\overset{\\phantom{", mod_phantom$Arrow, "}}{",mod_phantom$Arrow,"}")
mod_phantom$coef3 <- paste0("\\overset{\\phantom{", mod_phantom$coef3, "}}{",mod_phantom$coef3,"}")
mod_phantom$Oxyde <- paste0("\\overset{\\phantom{", mod_phantom$Oxyde, "}}{",mod_phantom$Oxyde,"}")
#######################################################
output[[6]] <- mod_phantom
names(output)[6] <- "Level05_PlusAndArrow"
######################################################
output[[7]] <- apply( output[[6]], 1 , function(x){
paste0("$", paste0(x, collapse =""), "$")
})
output[[7]] <- as.data.frame(output[[7]])
colnames(output[[7]])[1] <- "Oxyde"
names(output)[7] <- "Level06_LaTeX02"
###################################################################################
output[[8]] <- ChemFormule_Oxyde(chem_symbol = chem_symbol,
element_valence = element_valence,
gas_status_element = gas_status_element,
language = language)$ChemFormule_pure
names(output)[8] <- "ChemFormule_pure"
#######################################################################################
# output[[9]] <- ChemFormule_Oxyde(chem_symbol = chem_symbol,
#                                  element_valence = element_valence,
#                                  gas_status_element = gas_status_element,
#                                  language = language)$ChemFormule_LaTeX
output[[9]] <- output[[6]][nrow(output[[6]]), ncol(output[[6]])]
output[[9]] <- paste0("$", output[[9]], "$")
names(output)[9] <- "ChemFormule_LaTeX"
output[[9]]
output[[6]]
output[[5]]
mod_phantom <- output[[5]]
for(k1 in 1:ncol(mod_phantom)) {
for(k2 in 1:nrow(mod_phantom)) {
# k1 <- 8
# k2 <- 3
esta_seleccion <- mod_phantom[k2, k1]
dt_0 <- grepl("0", esta_seleccion)
dt_1 <- grepl("1", esta_seleccion)
dt_algo <- sum(sum(dt_0) + sum(dt_1)) > 0
if(dt_algo){
if (dt_0) esta_seleccion <- paste0("\\phantom{", esta_seleccion, "}")
if (dt_1) esta_seleccion <- stringr::str_replace_all(string = esta_seleccion, "1", "\\\\phantom{1}")
# if (dt_1) esta_seleccion <- gsub(pattern = "1", replacement = "\\phantom{1}", x = esta_seleccion)
mod_phantom[k2, k1] <- esta_seleccion
}
}
}
super_chem_formule <- mod_phantom[nrow(mod_phantom), ncol(mod_phantom )]
super_chem_formule
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
ThugChemPage()
language
language <- "esp"
aca <- names(PackTC_04_Oxyde[[language]])
aca
chem_symbol <- "H"
the_valence <- 1
gas_status_element <- TRUE
language <- "esp"
fusion <- paste0("_"chemsymbol, the_valence, "_")
fusion <- paste0("_",chemsymbol, the_valence, "_")
fusion <- paste0("_",chem_symbol, the_valence, "_")
#
# chem_symbol <- "H"
# the_valence <- 1
# gas_status_element <- TRUE
# language <- "esp"
# # # NOTAAAAA # # #
# Esto hay que cambiarlo, para que no lo calcule, sino que
# lo tome directamente de PackTC_04_Oxyde !!!!!!!!!!!
aca <- names(PackTC_04_Oxyde[[language]])
grepl(pattern = fusion, x = aca)
# Esto hay que cambiarlo, para que no lo calcule, sino que
# lo tome directamente de PackTC_04_Oxyde !!!!!!!!!!!
aca <- names(PackTC_04_Oxyde[[language]])
dt_este <- grepl(pattern = fusion, x = aca)
el_elegido <- aca[dt_este]
PackTC_04_Oxyde[[language]][[el_elegido]][["format02_oxyde"]]
library(devtools)
document()
load_all()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
library(devtools)
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
document()
load_all()
ThugChemPage()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
