"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "OxydeFullName_Stock"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
return(the_output)
}, simplify = F, USE.NAMES = T)
# Input 01 y 02
input_obj_name01 <-  "DataTC_02_Elements"
input_obj_name02 <-  "DataTC_03_Valences"
input_folder <- "./data/"
input_file01 <- paste0(input_obj_name01, ".rda")
input_file02 <- paste0(input_obj_name02, ".rda")
input_path01 <- paste0(input_folder, input_file01)
input_path02 <- paste0(input_folder, input_file02)
# Importamos el objeto "DataTC_02_Elements" y "DataTC_03_Valences"
load(input_path01)
load(input_path02)
# # # # # # # # # # # # # # #
# Input 03
input_obj_name03 <-  "ExtraDataTC_04_Oxyde"
input_folder03 <- "./data-raw/ExtraData/"
input_file03 <- list.files(input_folder03)
input_path03 <- paste0(input_folder03, input_file03)
ExtraDataTC_04_Oxyde <- sapply(input_path03, function(x){
utils::read.csv(file = x,
stringsAsFactors = FALSE,
header = T,
sep = ";",
dec = ".")
},simplify = F, USE.NAMES = T)
names(ExtraDataTC_04_Oxyde) <- sapply(names(ExtraDataTC_04_Oxyde), function(x){
aver <- strsplit(x, "_")[[1]]
aver <- aver[length(aver)]
strsplit(aver, ".csv")[[1]]
}, simplify = T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Output Details
output_obj_name <-  "DataTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_02_Elements)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
selected_cols_01 <- c("Order", "Symbol",  "Name", "AtomicNumber",
"Group", "Period",  "Type", "Subtype",
"State", "Valence", "AmountOfValences",
"OrderGeneralValences", "OrderValenceOnElement",
"SelectedValence", "RomanValence",
"Type_Metal", "Type_NonMetal", "Type_Metalloide",
"Type_NobleGas", "State_Solid", "State_Liquid",
"State_Gas", "State_Dude", "Subtype_Halogen",
"Status_oxyde")
data_output <- sapply(all_languages, function(selected_language){
# # # selected_language <- "eng"
# Reference Data Input : ENG
data_input <- DataTC_03_Valences[[selected_language]]
seccion01 <- data_input[selected_cols_01]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Any change on the data set must the put here!
# Por example: if same valences of same element is as metal and other of the
# same element is non-metal.
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its available for to be
# an oxide or not. The new variable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
#### x <- 1
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status,
language = selected_language)$ChemFormule_pure
}
return(chem_formula)
})
new_columns[[1]][!data_input$Status_oxyde] <- "----"
names(new_columns)[1] <- "ChemFormule_pure"
# Classic Name
# Este nombre es tomado directamente del archiv CSV del idioma
# Esta info hay que agregarla al Help o documentacion en algun momento.
new_columns[[2]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_Classic_Oxyde
names(new_columns)[2] <- "Name_Classic_Oxyde"
new_columns[[3]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_IUPAC_Oxyde
names(new_columns)[3] <- "Name_IUPAC_Oxyde"
new_columns[[4]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# # # language = "esp"
# all_languages <- c("eng", "esp", "ita")
#if(sum(all_languages == language) == 0) language = "eng"
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[1]]
return(output)
})
new_columns[[4]][!data_input$Status_oxyde] <- "----"
names(new_columns)[4] <- "amount01_oxyde_Stock"
new_columns[[5]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[2]]
return(output)
})
new_columns[[5]][!data_input$Status_oxyde] <- "----"
names(new_columns)[5] <- "amount02_oxyde_Stock"
# Esto de aca es una chanchada...
# Le impone el espanion a todas las salidas.
# Hay que ver despues como armamos esta parte para cada idioma. ######
new_columns[[6]] <- paste0(new_columns[["amount01_oxyde_Stock"]],
"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "OxydeFullName_Stock"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
return(the_output)
}, simplify = F, USE.NAMES = T)
assign(output_obj_name, data_output)
output_obj_name
data_output
output_obj_name
Create_DataTC_04_Oxyde()
Create_DataTC_04_Oxyde <- function(){
# Input 01 y 02
input_obj_name01 <-  "DataTC_02_Elements"
input_obj_name02 <-  "DataTC_03_Valences"
input_folder <- "./data/"
input_file01 <- paste0(input_obj_name01, ".rda")
input_file02 <- paste0(input_obj_name02, ".rda")
input_path01 <- paste0(input_folder, input_file01)
input_path02 <- paste0(input_folder, input_file02)
# Importamos el objeto "DataTC_02_Elements" y "DataTC_03_Valences"
load(input_path01)
load(input_path02)
# # # # # # # # # # # # # # #
# Input 03
input_obj_name03 <-  "ExtraDataTC_04_Oxyde"
input_folder03 <- "./data-raw/ExtraData/"
input_file03 <- list.files(input_folder03)
input_path03 <- paste0(input_folder03, input_file03)
ExtraDataTC_04_Oxyde <- sapply(input_path03, function(x){
utils::read.csv(file = x,
stringsAsFactors = FALSE,
header = T,
sep = ";",
dec = ".")
},simplify = F, USE.NAMES = T)
names(ExtraDataTC_04_Oxyde) <- sapply(names(ExtraDataTC_04_Oxyde), function(x){
aver <- strsplit(x, "_")[[1]]
aver <- aver[length(aver)]
strsplit(aver, ".csv")[[1]]
}, simplify = T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Output Details
output_obj_name <-  "DataTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_02_Elements)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
selected_cols_01 <- c("Order", "Symbol",  "Name", "AtomicNumber",
"Group", "Period",  "Type", "Subtype",
"State", "Valence", "AmountOfValences",
"OrderGeneralValences", "OrderValenceOnElement",
"SelectedValence", "RomanValence",
"Type_Metal", "Type_NonMetal", "Type_Metalloide",
"Type_NobleGas", "State_Solid", "State_Liquid",
"State_Gas", "State_Dude", "Subtype_Halogen",
"Status_oxyde")
data_output <- sapply(all_languages, function(selected_language){
# # # selected_language <- "eng"
# Reference Data Input : ENG
data_input <- DataTC_03_Valences[[selected_language]]
seccion01 <- data_input[selected_cols_01]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Any change on the data set must the put here!
# Por example: if same valences of same element is as metal and other of the
# same element is non-metal.
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its available for to be
# an oxide or not. The new variable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
#### x <- 1
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status,
language = selected_language)$ChemFormule_pure
}
return(chem_formula)
})
new_columns[[1]][!data_input$Status_oxyde] <- "----"
names(new_columns)[1] <- "ChemFormule_pure"
# Classic Name
# Este nombre es tomado directamente del archiv CSV del idioma
# Esta info hay que agregarla al Help o documentacion en algun momento.
new_columns[[2]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_Classic_Oxyde
names(new_columns)[2] <- "Name_Classic_Oxyde"
new_columns[[3]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_IUPAC_Oxyde
names(new_columns)[3] <- "Name_IUPAC_Oxyde"
new_columns[[4]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# # # language = "esp"
# all_languages <- c("eng", "esp", "ita")
#if(sum(all_languages == language) == 0) language = "eng"
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[1]]
return(output)
})
new_columns[[4]][!data_input$Status_oxyde] <- "----"
names(new_columns)[4] <- "amount01_oxyde_Stock"
new_columns[[5]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[2]]
return(output)
})
new_columns[[5]][!data_input$Status_oxyde] <- "----"
names(new_columns)[5] <- "amount02_oxyde_Stock"
# Esto de aca es una chanchada...
# Le impone el espanion a todas las salidas.
# Hay que ver despues como armamos esta parte para cada idioma. ######
new_columns[[6]] <- paste0(new_columns[["amount01_oxyde_Stock"]],
"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "OxydeFullName_Stock"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
return(the_output)
}, simplify = F, USE.NAMES = T)
# Creamos "DataTC_04_Oxyde" como objeto
assign(output_obj_name, data_output)
gen_sentence <- "usethis::use_data(_ObjName_, overwrite = TRUE)"
the_sentence <- gsub("_ObjName_", output_obj_name, gen_sentence)
eval(parse(text = the_sentence))
# Save Each Table as .csv file
for(x in 1:length(all_languages)){
selected_output_path <- output_path[x]
selected_language <- all_languages[x]
readr::write_excel_csv(x = data_output[[selected_language]],
file = selected_output_path,
col_names = T,
delim = ";")
}
}
Create_DataTC_04_Oxyde()
library(devtools)
document()
Create_All_TC_EjecucionDeAurora()
document()
use_r()
use_r("ExtraDataTC_04_Oxyde")
Create_All_TC_EjecucionDeAurora()
document()
load_all()
document()
###############################################################3
# Agregamos a ExtraDataTC_04_Oxyde al package
usethis::use_data(ExtraDataTC_04_Oxyde, overwrite = TRUE)
load_all()
document()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
check()
# use_package( 'usethis')
use_package('graphics')
# use_package( 'usethis')
use_package('stats')
document()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
check()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
check()
install()
ThugChemPage()
input_obj_name <-  "DataTC_01_PeriodicTable"
input_folder <- "./data/"
input_file <- paste0(input_obj_name, ".rda")
input_path <- paste0(input_folder, input_file)
# Importamos el objeto "DataTC_01_PeriodicTable"
load(input_path)
output_obj_name <-  "DataTC_02_Elements"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_01_PeriodicTable)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
# data_input <- utils::read.csv(file = input_path, sep = ";", dec=".")
# data_input <- ThugCHemR::DataTC_01_PeriodicTable[["en"]]
data_input <- DataTC_01_PeriodicTable[["eng"]]
new_columns <- list()
new_columns[["Type_Metal"]] <- data_input$Type == "Metal"
new_columns[["Type_NonMetal"]] <- data_input$Type == "Non-metal"
new_columns[["Type_Metalloide"]] <- data_input$Type == "Metalloide"
new_columns[["Type_NobleGas"]] <- data_input$Type == "Noble gas"
new_columns[["State_Solid"]]	<- data_input$State == "Solid"
new_columns[["State_Liquid"]]	<- data_input$State == "Liquid"
new_columns[["State_Gas"]]	<- data_input$State == "Gas"
new_columns[["State_Dude"]] <- data_input$State == "???"
new_columns[["Subtype_Halogen"]] <- data_input$Subtype == "Halogens"
str_pad(10, "right")
str_pad("1", 10, "right")
str_pad("1", 10, "left")
new_columns[["ElementSelector"]] <- paste0(str_pad(data_input$Order, 3, "left"), " - ",
data_input$Symbol, " - ",
data_input$Name)
new_columns[["ElementSelector"]]
paste0(str_pad(data_input$Order, 3, "left"), " - ",
str_pad(data_input$Symbol, 2, "left"), " - ",
data_input$Name)
paste0(str_pad(data_input$Order, 3, "left"), " - ",
str_pad(data_input$Symbol, 2, "rigth"), " - ",
data_input$Name)
paste0(str_pad(data_input$Order, 3, "left"), " - ",
str_pad(data_input$Symbol, 2, "right"), " - ",
data_input$Name)
use_package('stringr')
input_obj_name <-  "DataTC_01_PeriodicTable"
input_folder <- "./data/"
input_file <- paste0(input_obj_name, ".rda")
input_path <- paste0(input_folder, input_file)
# Importamos el objeto "DataTC_01_PeriodicTable"
load(input_path)
output_obj_name <-  "DataTC_02_Elements"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_01_PeriodicTable)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
# data_input <- utils::read.csv(file = input_path, sep = ";", dec=".")
# data_input <- ThugCHemR::DataTC_01_PeriodicTable[["en"]]
data_input <- DataTC_01_PeriodicTable[["eng"]]
new_columns <- list()
new_columns[["Type_Metal"]] <- data_input$Type == "Metal"
new_columns[["Type_NonMetal"]] <- data_input$Type == "Non-metal"
new_columns[["Type_Metalloide"]] <- data_input$Type == "Metalloide"
new_columns[["Type_NobleGas"]] <- data_input$Type == "Noble gas"
new_columns[["State_Solid"]]	<- data_input$State == "Solid"
new_columns[["State_Liquid"]]	<- data_input$State == "Liquid"
new_columns[["State_Gas"]]	<- data_input$State == "Gas"
new_columns[["State_Dude"]] <- data_input$State == "???"
new_columns[["Subtype_Halogen"]] <- data_input$Subtype == "Halogens"
columns_pack <- do.call(cbind.data.frame, new_columns)
x <- all_languages[1]
ElementSelector01 <- paste0(stringr::str_pad(DataTC_01_PeriodicTable[[x]]$Order, 3, "left"), " - ",
stringr::str_pad(DataTC_01_PeriodicTable[[x]]$Symbol, 2, "right"), " - ",
DataTC_01_PeriodicTable[[x]]$Name)
the_output <- cbind.data.frame(DataTC_01_PeriodicTable[[x]],
columns_pack, ElementSelector01)
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
load_all()
document()
check()
install()
ThugChemPage()
library(ThugChemR)
DataTC_02_Elements
DataTC_02_Elements$eng$ElementSelector01
ThugChemPage()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
ThugChemPage()
load_all()
library(devtools)
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
document()
document()
load_all()
ThugChemPage()
ThugChemPage()
load_all()
ThugChemPage()
load_all()
ThugChemPage()
load_all()
ThugChemPage()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
check()
install()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
install()
ThugChemPage()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
document()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
install()
ThugChemPage()
library(devtools)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
library("colourpicker")
library("FRACTION")
library("latex2exp")
library("readr")
library("shiny")
library("shinydashboard")
library("stringr")
library("usethis")
library(devtools)
load_all()
ThugChemPage()
install()
