# Reference Data Input : ENG
data_input <- DataTC_03_Valences[[selected_language]]
seccion01 <- data_input[selected_cols_01]
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its available for to be
# an oxide or not. The new variable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
#### x <- 1
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status,
language = selected_language)$ChemFormule_pure
}
return(chem_formula)
})
new_columns <- list()
x <- 1
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status,
language = selected_language)$ChemFormule_pure
# Input 01 y 02
input_obj_name01 <-  "DataTC_02_Elements"
input_obj_name02 <-  "DataTC_03_Valences"
input_folder <- "./data/"
input_file01 <- paste0(input_obj_name01, ".rda")
input_file02 <- paste0(input_obj_name02, ".rda")
input_path01 <- paste0(input_folder, input_file01)
input_path02 <- paste0(input_folder, input_file02)
load(input_path01) # objeto "DataTC_02_Elements"
load(input_path02) # objeto "DataTC_03_Valences"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Input 03
input_obj_name03 <-  "ExtraDataTC_04_Oxyde"
input_folder03 <- "./data-raw/ExtraData/"
input_file03 <- list.files(input_folder03)
input_path03 <- paste0(input_folder03, input_file03)
ExtraDataTC_04_Oxyde <- sapply(input_path03, function(x){
utils::read.csv(file = x,
stringsAsFactors = FALSE,
header = T,
sep = ";",
dec = ".")
},simplify = F, USE.NAMES = T)
names(ExtraDataTC_04_Oxyde) <- sapply(names(ExtraDataTC_04_Oxyde), function(x){
aver <- strsplit(x, "_")[[1]]
aver <- aver[length(aver)]
strsplit(aver, ".csv")[[1]]
}, simplify = T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Output Details
output_obj_name <-  "DataTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_02_Elements)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
selected_language <- "eng"
selected_cols_01 <- c("Order", "Symbol",  "Name", "AtomicNumber",
"Group", "Period",  "Type", "Subtype",
"State", "Valence", "AmountOfValences",
"OrderGeneralValences", "OrderValenceOnElement",
"SelectedValence", "RomanValence",
"Type_Metal", "Type_NonMetal", "Type_Metalloide",
"Type_NobleGas", "State_Solid", "State_Liquid",
"State_Gas", "State_Dude", "Subtype_Halogen",
"Status_oxyde")
# Reference Data Input : ENG
data_input <- DataTC_03_Valences[[selected_language]]
seccion01 <- data_input[selected_cols_01]
new_columns <- list()
use_r("ChemFormule_Oxyde")
chem_symbol <- "Fe"
element_valence <- 2
gas_status_element <- TRUE
language = "eng"
chem_symbol
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
output[[4]] <- output[[4]]$Oxyde[nrow(output[[4]])]
chem_symbol <- "Fe"
element_valence <- 2
gas_status_element <- TRUE
language = "eng"
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
output[[4]] <- output[[4]]$Oxyde[nrow(output[[4]])]
output[[4]] <- output[[3]]$Oxyde[nrow(output[[3]])]
names(output)[4] <- "ChemFormule_pure"
output[[4]]
ChemFormule_Oxyde <- function(chem_symbol,
element_valence,
gas_status_element,
language){
# chem_symbol <- "Fe"
# element_valence <- 2
# gas_status_element <- TRUE
# language = "eng"
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
output[[4]] <- output[[3]]$Oxyde[nrow(output[[3]])]
names(output)[4] <- "ChemFormule_pure"
# Final Return
return(output)
}
ChemFormule_Oxyde <- function(chem_symbol,
element_valence,
gas_status_element,
language){
# chem_symbol <- "Fe"
# element_valence <- 2
# gas_status_element <- TRUE
# language = "eng"
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
output[[4]] <- output[[3]]$Oxyde[nrow(output[[3]])]
names(output)[4] <- "ChemFormule_pure"
# Final Return
return(output)
}
# Input 01 y 02
input_obj_name01 <-  "DataTC_02_Elements"
input_obj_name02 <-  "DataTC_03_Valences"
input_folder <- "./data/"
input_file01 <- paste0(input_obj_name01, ".rda")
input_file02 <- paste0(input_obj_name02, ".rda")
input_path01 <- paste0(input_folder, input_file01)
input_path02 <- paste0(input_folder, input_file02)
load(input_path01) # objeto "DataTC_02_Elements"
load(input_path02) # objeto "DataTC_03_Valences"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Input 03
input_obj_name03 <-  "ExtraDataTC_04_Oxyde"
input_folder03 <- "./data-raw/ExtraData/"
input_file03 <- list.files(input_folder03)
input_path03 <- paste0(input_folder03, input_file03)
ExtraDataTC_04_Oxyde <- sapply(input_path03, function(x){
utils::read.csv(file = x,
stringsAsFactors = FALSE,
header = T,
sep = ";",
dec = ".")
},simplify = F, USE.NAMES = T)
names(ExtraDataTC_04_Oxyde) <- sapply(names(ExtraDataTC_04_Oxyde), function(x){
aver <- strsplit(x, "_")[[1]]
aver <- aver[length(aver)]
strsplit(aver, ".csv")[[1]]
}, simplify = T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Output Details
output_obj_name <-  "DataTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_02_Elements)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
data_output <- sapply(all_languages, function(selected_language){
# # # selected_language <- "eng"
selected_cols_01 <- c("Order", "Symbol",  "Name", "AtomicNumber",
"Group", "Period",  "Type", "Subtype",
"State", "Valence", "AmountOfValences",
"OrderGeneralValences", "OrderValenceOnElement",
"SelectedValence", "RomanValence",
"Type_Metal", "Type_NonMetal", "Type_Metalloide",
"Type_NobleGas", "State_Solid", "State_Liquid",
"State_Gas", "State_Dude", "Subtype_Halogen",
"Status_oxyde")
# Reference Data Input : ENG
data_input <- DataTC_03_Valences[[selected_language]]
seccion01 <- data_input[selected_cols_01]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Any change on the data set must the put here!
# Por example: if same valences of same element is as metal and other of the
# same element is non-metal.
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its available for to be
# an oxide or not. The new variable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
#### x <- 1
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- ChemFormule_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status,
language = selected_language)$ChemFormule_pure
}
return(chem_formula)
})
new_columns[[1]][!data_input$Status_oxyde] <- "----"
names(new_columns)[1] <- "ChemFormule_pure"
# Classic Name
# Este nombre es tomado directamente del archiv CSV del idioma
# Esta info hay que agregarla al Help o documentacion en algun momento.
new_columns[[2]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_Classic_Oxyde
names(new_columns)[2] <- "Name_Classic_Oxyde"
new_columns[[3]] <- ExtraDataTC_04_Oxyde[[selected_language]]$Name_IUPAC_Oxyde
names(new_columns)[3] <- "Name_IUPAC_Oxyde"
new_columns[[4]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# # # language = "esp"
# all_languages <- c("eng", "esp", "ita")
#if(sum(all_languages == language) == 0) language = "eng"
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[1]]
return(output)
})
new_columns[[4]][!data_input$Status_oxyde] <- "----"
names(new_columns)[4] <- "amount01_oxyde_Stock"
new_columns[[5]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[2]]
return(output)
})
new_columns[[5]][!data_input$Status_oxyde] <- "----"
names(new_columns)[5] <- "amount02_oxyde_Stock"
# Esto de aca es una chanchada...
# Le impone el espanion a todas las salidas.
# Hay que ver despues como armamos esta parte para cada idioma. ######
new_columns[[6]] <- paste0(new_columns[["amount01_oxyde_Stock"]],
"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "Name_Stock_Oxyde"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
return(the_output)
}, simplify = F, USE.NAMES = T)
data_output
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
# # # #
input_obj_name <-  "DataTC_04_Oxyde"
input_folder <- "./data/"
input_file <- paste0(input_obj_name, ".rda")
input_path <- paste0(input_folder, input_file)
# Importamos el objeto "DataTC_01_PeriodicTable"
load(input_path)
# Output Details
output_obj_name <-  "PackTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(DataTC_04_Oxyde)
# Unique .RData
# Is a big big list with all about oxyde
output_file <- paste0(output_obj_name,"_",".RData")
output_path <- paste0(output_folder, output_file)
data_output <- sapply(all_languages, function(y){
# # # y <- "ita"
data_input <- DataTC_04_Oxyde[[y]]
pack_output <- list()
max_digits <- floor(log10(nrow(data_input))) + 1
for(x in 1:nrow(data_input)){
chem_symbol <- data_input$Symbol[x]
element_valence <- data_input$SelectedValence[x]
element_valence <- as.numeric(as.character(element_valence))
gas_status_element <- data_input$State_Gas[x]
resolution_complite <- Resolution_Oxyde(chem_symbol = chem_symbol,
element_valence = element_valence,
gas_status_element = gas_status_element,
language = y)
the_atomic_number <- data_input$Order[x]
the_order <- stringr::str_pad(string = the_atomic_number,
width = max_digits,
side = "left",
pad = "0")
chem_formule <-  resolution_complite$ChemFormule
final_name <- paste0("Oxyde_", the_order, "_",
chem_symbol, element_valence, "_",
chem_formule)
pack_output[[final_name]] <- resolution_complite
}
return(pack_output)
}, simplify = F, USE.NAMES = T)
assign(output_obj_name, data_output)
gen_sentence <- "usethis::use_data(_ObjName_, overwrite = TRUE)"
the_sentence <- gsub("_ObjName_", output_obj_name, gen_sentence)
eval(parse(text = the_sentence))
Create_All_TC_EjecucionDeAurora()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
chem_symbol = "H"
element_valence = 1
gas_status_element = TRUE
language <- "esp"
input_data <- ThugChemR::PackTC_04_Oxyde[[language]]
all_oxyde <- names(input_data)
armado <- paste0("_", chem_symbol, element_valence, "_")
pos_oxyde <- grep(armado, all_oxyde)
selected_oxyde <- all_oxyde[pos_oxyde]
complite_solution <- input_data[[selected_oxyde]]
selected_resolution <- complite_solution$Level06_LaTeX02
chem_formula <- complite_solution$ChemFormule
nomenclatura <- complite_solution$Nomenclature_Oxyde
plot(1:10, 1:10, col = "white", main = chem_formula,
xlab = "", ylab = "", axes = F)
# Plot region color
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "#f7f7f7") # Color
# Add a new plot
par(new = TRUE)
plot(1:10, 1:10, col = "white", main = chem_formula,
xlab = "", ylab = "", axes = F)
graphics::text(3, 9, chem_formula, pos = 4, cex = 2)
graphics::text(3, 7, nomenclatura[1], pos = 4, cex = 2)
graphics::text(3, 5, nomenclatura[2], pos = 4, cex = 2)
graphics::text(3, 3, nomenclatura[3], pos = 4, cex = 2)
complite_solution
complite_solution$Nomenclature_Oxyde_02
input_data <- ThugChemR::PackTC_04_Oxyde[[language]]
all_oxyde <- names(input_data)
armado <- paste0("_", chem_symbol, element_valence, "_")
pos_oxyde <- grep(armado, all_oxyde)
selected_oxyde <- all_oxyde[pos_oxyde]
complite_solution <- input_data[[selected_oxyde]]
selected_resolution <- complite_solution$Level06_LaTeX02
chem_formula <- complite_solution$ChemFormule
nomenclatura <- complite_solution$Nomenclature_Oxyde_02
plot(1:10, 1:10, col = "white", main = chem_formula,
xlab = "", ylab = "", axes = F)
# Plot region color
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "#f7f7f7") # Color
# Add a new plot
par(new = TRUE)
plot(1:10, 1:10, col = "white", main = chem_formula,
xlab = "", ylab = "", axes = F)
graphics::text(3, 9, chem_formula, pos = 4, cex = 2)
graphics::text(3, 7, nomenclatura[1], pos = 4, cex = 2)
graphics::text(3, 5, nomenclatura[2], pos = 4, cex = 2)
graphics::text(3, 3, nomenclatura[3], pos = 4, cex = 2)
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
ThugChemPage()
document()
load_all()
Create_All_TC_EjecucionDeAurora()
document()
load_all()
ThugChemPage()
document()
load_all()
ThugChemPage()
