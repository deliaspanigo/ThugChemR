stringsAsFactors = FALSE,
header = T)
return(data_input)
}, simplify = F, USE.NAMES = T)
data_output
names(data_output)
output_obj_name
assign(output_obj_name, data_output)
gen_sentence <- "usethis::use_data(_ObjName_, overwrite = TRUE)"
the_sentence <- gsub("_ObjName_", output_obj_name, gen_sentence)
eval(parse(text = the_sentence))
use_r("DataTC_04_Oxyde")
use_r("ExtraDataTC_04_Oxyde")
document()
load_all()
document()
load_all()
Create_DataTC_04_Oxyde()
# Output Details
output_obj_name <-  "DataTC_04_Oxyde"
output_folder <- "./data-raw/Output/"
all_languages <- names(ThugChemR::DataTC_02_Elements)
output_file <- paste0(output_obj_name,"_", all_languages,".csv")
output_path <- paste0(output_folder, output_file)
selected_cols_01 <- c("Order", "Symbol",  "Name", "AtomicNumber",
"Group", "Period",  "Type", "Subtype",
"State", "Valence", "AmountOfValences",
"OrderGeneralValences", "OrderValenceOnElement",
"SelectedValence", "RomanValence",
"Type_Metal", "Type_NonMetal", "Type_Metalloide",
"Type_NobleGas", "State_Solid", "State_Liquid",
"State_Gas", "State_Dude", "Subtype_Halogen",
"Status_oxyde")
data_output <- sapply(all_languages, function(x){
# # # x <- "eng"
# Reference Data Input : ENG
data_input <- ThugChemR::DataTC_03_Valences[[x]]
seccion01 <- data_input[selected_cols_01]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Any change on the data set must the put here!
# Por example: if same valences of same element is as metal and other of the
# same element is non-metal.
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its avairable for to be
# an oxide or not. The new vairable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status)$ChemFormule_pure
}
return(chem_formula)
})
new_columns[[1]][!data_input$Status_oxyde] <- "----"
names(new_columns)[1] <- "ChemFormule_pure"
new_columns[[2]] <- rep("LALA", nrow(data_input))
new_columns[[2]][!data_input$Status_oxyde] <- "----"
names(new_columns)[2] <- "OxydePrefix_Classic"
# A esta la dejamos por ahora con el nombre del elemento
# hay que colocarle el nombre de cada oxido en su idioma a
# cada archivo.
# new_columns[[3]] <- data_input$Name
#new_columns[[3]][!data_input$Status_oxyde] <- "----"
# names(new_columns)[3] <- "OxydeName_Classic"
new_columns[[3]] <- ExtraDataTC_04_Oxyde[[x]]$OxydeName_Classic
names(new_columns)[3] <- "OxydeName_Classic"
new_columns[[4]] <- paste0("Óxido ", new_columns[["OxydeName_Classic"]])
new_columns[[4]][!data_input$Status_oxyde] <- "----"
names(new_columns)[4] <- "OxydeFullName_Classic"
new_columns[[5]] <- paste0("Óxido de ", data_input$Name,
" (", data_input$RomanValence, ")")
new_columns[[5]][!data_input$Status_oxyde] <- "----"
names(new_columns)[5] <- "OxydeFullName_IUPAC"
new_columns[[6]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# # # language = "esp"
# all_languages <- c("eng", "esp", "ita")
#if(sum(all_languages == language) == 0) language = "eng"
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[1]]
return(output)
})
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "amount01_oxyde_Stock"
new_columns[[7]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[2]]
return(output)
})
new_columns[[7]][!data_input$Status_oxyde] <- "----"
names(new_columns)[7] <- "amount02_oxyde_Stock"
new_columns[[8]] <- paste0(new_columns[["amount01_oxyde_Stock"]],
"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[8]][!data_input$Status_oxyde] <- "----"
names(new_columns)[8] <- "OxydeFullName_IUPAC"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
return(the_output)
}, simplify = F, USE.NAMES = T)
# # # x <- "eng"
# Reference Data Input : ENG
data_input <- ThugChemR::DataTC_03_Valences[[x]]
x <- "eng"
# # # x <- "eng"
# Reference Data Input : ENG
data_input <- ThugChemR::DataTC_03_Valences[[x]]
seccion01 <- data_input[selected_cols_01]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Any change on the data set must the put here!
# Por example: if same valences of same element is as metal and other of the
# same element is non-metal.
new_columns <- list()
# # # Oxide Status
# We must define for each valence on each element if its avairable for to be
# an oxide or not. The new vairable will be named 'status_oxyde'.
# Only noble gas cant be oxyde!
new_columns[[1]] <- sapply(1:nrow(seccion01), function(x){
dt_oxyde <- seccion01$Status_oxyde[x]
chem_formula <- "----"
selected_symbol <- seccion01$Symbol[x]
selected_valence <- as.numeric(as.character(seccion01$SelectedValence[x]))
selected_gas_status <- seccion01$State_Gas[x]
if(dt_oxyde) {
chem_formula <- Resolution_Oxyde(chem_symbol = selected_symbol,
element_valence = selected_valence,
gas_status_element = selected_gas_status)$ChemFormule_pure
}
return(chem_formula)
})
new_columns[[1]][!data_input$Status_oxyde] <- "----"
names(new_columns)[1] <- "ChemFormule_pure"
new_columns[[2]] <- rep("LALA", nrow(data_input))
new_columns[[2]][!data_input$Status_oxyde] <- "----"
names(new_columns)[2] <- "OxydePrefix_Classic"
# A esta la dejamos por ahora con el nombre del elemento
# hay que colocarle el nombre de cada oxido en su idioma a
# cada archivo.
# new_columns[[3]] <- data_input$Name
#new_columns[[3]][!data_input$Status_oxyde] <- "----"
# names(new_columns)[3] <- "OxydeName_Classic"
new_columns[[3]] <- ExtraDataTC_04_Oxyde[[x]]$OxydeName_Classic
names(new_columns)[3] <- "OxydeName_Classic"
new_columns[[4]] <- paste0("Óxido ", new_columns[["OxydeName_Classic"]])
new_columns[[4]][!data_input$Status_oxyde] <- "----"
names(new_columns)[4] <- "OxydeFullName_Classic"
new_columns[[5]] <- paste0("Óxido de ", data_input$Name,
" (", data_input$RomanValence, ")")
new_columns[[5]][!data_input$Status_oxyde] <- "----"
names(new_columns)[5] <- "OxydeFullName_IUPAC"
new_columns[[6]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# # # language = "esp"
# all_languages <- c("eng", "esp", "ita")
#if(sum(all_languages == language) == 0) language = "eng"
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[1]]
return(output)
})
new_columns[[6]][!data_input$Status_oxyde] <- "----"
names(new_columns)[6] <- "amount01_oxyde_Stock"
new_columns[[7]] <- sapply(new_columns[["ChemFormule_pure"]], function(x){
#  x <- new_columns[["ChemFormule_pure"]][1]
# Internal Prefix
the_prefix <- list()  #    1       2        3       4     5
the_prefix[["eng"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["esp"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
the_prefix[["ita"]] <- c("Mono",  "Di",  "Tri", "Tetra", "Penta", "Hexa", "Hepta")
# Selection for on language
selected_prefix <- the_prefix[["esp"]]
metralla <- strsplit(x, "")[[1]]
prueba01 <- suppressWarnings(as.numeric(as.character(metralla)))
prueba01 <- na.omit(prueba01)
if(length(prueba01) == 0) output <- "----" else
if(length(prueba01) == 2) output <- selected_prefix[prueba01[2]]
return(output)
})
new_columns[[7]][!data_input$Status_oxyde] <- "----"
names(new_columns)[7] <- "amount02_oxyde_Stock"
new_columns[[8]] <- paste0(new_columns[["amount01_oxyde_Stock"]],
"Óxido",
" de ",
new_columns[["amount02_oxyde_Stock"]],
data_input$Name)
new_columns[[8]][!data_input$Status_oxyde] <- "----"
names(new_columns)[8] <- "OxydeFullName_IUPAC"
# Final Armed
columns_pack <- do.call(cbind.data.frame, new_columns)
the_output <- cbind.data.frame(seccion01, columns_pack)
the_output
Create_DataTC_04_Oxyde()
Create_ExtraDataTC_04_Oxyde()
document()
load_all()
document()
load_all()
Create_DataTC_04_Oxyde()
chem_symbol <- "Fe"
element_valence <- 2
gas_status_element <- TRUE
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
# 4) LaTeX 01: Element, Oxigen and Oxide with subindex
#    as an pack each one with special format for LaTeX
output[[4]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], "_{", output[[2]][,3], "}"),
output[[2]][4],
paste0(output[[2]][,5], "_{", output[[2]][,6], "}"),
output[[2]][7],
paste0(output[[2]][,8],  "_{", output[[2]][,9] , "}",
output[[2]][,10], "_{", output[[2]][,11], "}"))
colnames(output[[4]]) <- colnames(output[[3]])
names(output)[4] <- "Level03_LaTeX01"
# 5) Latex + Symbols ( + and arrow)
output[[5]] <- cbind.data.frame(output[[4]][c(1,2)],
rep("+", nrow(output[[4]])),
output[[4]][c(3,4)],
# rep("\rightarrow", nrow(output[[4]])),
rep("       ------>     ", nrow(output[[4]])),
output[[4]][c(5,6)])
colnames(output[[5]])[3] <- "Plus"
colnames(output[[5]])[6] <- "Arrow"
names(output)[5] <- "Level04_PlusAndArrow"
output[[6]] <- apply( output[[5]], 1 , function(x){
paste0("$", paste0(x, collapse =""), "$")
})
output[[6]] <- as.data.frame(output[[6]])
colnames(output[[6]])[1] <- "Oxyde"
names(output)[6] <- "Level06_LaTeX02"
output[[7]] <- output[[3]]$Oxyde[nrow(output[[3]])]
names(output)[7] <- "ChemFormule_pure"
#######################################################
# # # # # # Los siguientes pasos son efectivamente "SOLVER"...
# # # 5) Simplificacion de los subindices en el oxido
# # # 6) Balanceo del oxido
# # # 7) Balanceo del elemento
# # # 8) Simplificacion de los coeficientes
TC_Text_Oxyde_General <- list()
TC_Text_Oxyde_General[[1]] <- "Presentacion del elemento y del oxigeno, todo con subindices 1."
TC_Text_Oxyde_General[[2]] <- "Los elementos en estado gaseoso se detallan con subindice 2"
TC_Text_Oxyde_General[[3]] <- "Presentacion del oxido todo con sunindices 1."
TC_Text_Oxyde_General[[4]] <- "Subindices en el oxido son las valencias cruzadas de los elementos."
TC_Text_Oxyde_General[[5]] <- "Simplificacion de los subindices en el oxido"
TC_Text_Oxyde_General[[6]] <- "Balanceo del oxigeno"
TC_Text_Oxyde_General[[7]] <- "Balanceo del elemento"
TC_Text_Oxyde_General[[8]] <- "Simplificacion de los coeficientes"
text_oxyde_general <- do.call(rbind.data.frame, TC_Text_Oxyde_General)
TC_Text_Oxyde_Particular <- list()
TC_Text_Oxyde_Particular[[1]] <- "Los reactivos son _elemento_ y el oxigeno."
TC_Text_Oxyde_Particular[[2]] <- "El oxigeno es un gas, por lo tanto lleva subindice 2... y faltaría agregar lo que le pasa al otro elemento."
TC_Text_Oxyde_Particular[[3]] <- "Comenzamos con _el_oxido_ con subindices 1."
TC_Text_Oxyde_Particular[[4]] <- "El subindice del _elemento_ sera 2, y el subindice del oxigeno sera _valencia_."
TC_Text_Oxyde_Particular[[5]] <- "En este caso se simplificara por ... o no se simplificara"
TC_Text_Oxyde_Particular[[6]] <- "En este caso colocamos... ... ... explicar!"
TC_Text_Oxyde_Particular[[7]] <- "Para lograrlo, colocamos..."
TC_Text_Oxyde_Particular[[8]] <- "En este caso no es necesario... o si es necesario"
text_oxyde_particular <- do.call(rbind.data.frame, TC_Text_Oxyde_Particular)
entrega_mod <- paste0("$", output[["Level06_LaTeX02"]][,1],  "$")
# entrega_mod <- paste0(" withMathJax(", entrega_mod, ")")
# entreda_mod[1] <- 'You do not see me initially: $$e^{i \\pi} + 1 = 0$$'
# entrega_mod <- rep("$$e^{i \\pi} + 1 = 0$$", 8)
output[[8]] <- cbind.data.frame(entrega_mod,
text_oxyde_general,
text_oxyde_particular)
colnames( output[[8]]) <- c("Steps", "General", "Particular")
names(output)[8] <- "format02_oxyde"
dt_symbol + dt_selected_valence
#####################################################
dt_symbol <- DataTC_04_Oxyde$eng$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
dt_row <- dt_symbol + dt_selected_valence
dt_symbol + dt_selected_valence
#####################################################
dt_symbol <- DataTC_04_Oxyde$eng$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
dt_row <- (dt_symbol + dt_selected_valence) == 2
dt_row
colnames(DataTC_04_Oxyde)
DataTC_04_Oxyde[["eng"]]
colnames(DataTC_04_Oxyde[["eng"]])
document()
load_all()
Create_DataTC_04_Oxyde()
Create_DataTC_04_Oxyde()
load_all()
chem_symbol <- "Fe"
element_valence <- 2
gas_status_element <- TRUE
# chem_symbol <- "Fe"
# element_valence <- 2
# gas_status_element <- TRUE
the_solver <- Solver_Oxyde(element_valence = element_valence,
gas_status_element = gas_status_element)
vector_symbol <- rep(chem_symbol, nrow(the_solver))
vector_oxygen <- rep("O", nrow(the_solver))
output <- list()
# 1) Original Output Solver
output[[1]] <- the_solver
names(output)[1] <- "Level01_Solver"
# 2) Add Element and Oxygen in reactives and products
output[[2]] <- cbind.data.frame(the_solver[1], vector_symbol,
the_solver[c(2,3)], vector_oxygen,
the_solver[c(4,5)],
vector_symbol, the_solver[c(6)],
vector_oxygen, the_solver[c(7)])
colnames(output[[2]])[2] <- "Element_R"
colnames(output[[2]])[5] <- "Oxygen_R"
colnames(output[[2]])[8] <- "Element_P"
colnames(output[[2]])[10] <- "Oxygen_P"
names(output)[2] <- "Level02_SymbolsAdded"
# 3) Fision 01: Element, Oxigen and Oxide with subindex
#    as an pack each one.
output[[3]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], output[[2]][,3]),
output[[2]][4],
paste0(output[[2]][,5], output[[2]][,6]),
output[[2]][7],
paste0(output[[2]][,8], output[[2]][,9],
output[[2]][,10], output[[2]][,11]))
colnames(output[[3]])[c(2,4,6)] <- c("ER", "OR", "Oxyde")
names(output)[3] <- "Level03_Fusion01"
# 4) LaTeX 01: Element, Oxigen and Oxide with subindex
#    as an pack each one with special format for LaTeX
output[[4]] <- cbind.data.frame(output[[2]][1],
paste0(output[[2]][,2], "_{", output[[2]][,3], "}"),
output[[2]][4],
paste0(output[[2]][,5], "_{", output[[2]][,6], "}"),
output[[2]][7],
paste0(output[[2]][,8],  "_{", output[[2]][,9] , "}",
output[[2]][,10], "_{", output[[2]][,11], "}"))
colnames(output[[4]]) <- colnames(output[[3]])
names(output)[4] <- "Level03_LaTeX01"
# 5) Latex + Symbols ( + and arrow)
output[[5]] <- cbind.data.frame(output[[4]][c(1,2)],
rep("+", nrow(output[[4]])),
output[[4]][c(3,4)],
# rep("\rightarrow", nrow(output[[4]])),
rep("       ------>     ", nrow(output[[4]])),
output[[4]][c(5,6)])
colnames(output[[5]])[3] <- "Plus"
colnames(output[[5]])[6] <- "Arrow"
names(output)[5] <- "Level04_PlusAndArrow"
output[[6]] <- apply( output[[5]], 1 , function(x){
paste0("$", paste0(x, collapse =""), "$")
})
output[[6]] <- as.data.frame(output[[6]])
colnames(output[[6]])[1] <- "Oxyde"
names(output)[6] <- "Level06_LaTeX02"
output[[7]] <- output[[3]]$Oxyde[nrow(output[[3]])]
names(output)[7] <- "ChemFormule_pure"
#######################################################
# # # # # # Los siguientes pasos son efectivamente "SOLVER"...
# # # 5) Simplificacion de los subindices en el oxido
# # # 6) Balanceo del oxido
# # # 7) Balanceo del elemento
# # # 8) Simplificacion de los coeficientes
TC_Text_Oxyde_General <- list()
TC_Text_Oxyde_General[[1]] <- "Presentacion del elemento y del oxigeno, todo con subindices 1."
TC_Text_Oxyde_General[[2]] <- "Los elementos en estado gaseoso se detallan con subindice 2"
TC_Text_Oxyde_General[[3]] <- "Presentacion del oxido todo con sunindices 1."
TC_Text_Oxyde_General[[4]] <- "Subindices en el oxido son las valencias cruzadas de los elementos."
TC_Text_Oxyde_General[[5]] <- "Simplificacion de los subindices en el oxido"
TC_Text_Oxyde_General[[6]] <- "Balanceo del oxigeno"
TC_Text_Oxyde_General[[7]] <- "Balanceo del elemento"
TC_Text_Oxyde_General[[8]] <- "Simplificacion de los coeficientes"
text_oxyde_general <- do.call(rbind.data.frame, TC_Text_Oxyde_General)
TC_Text_Oxyde_Particular <- list()
TC_Text_Oxyde_Particular[[1]] <- "Los reactivos son _elemento_ y el oxigeno."
TC_Text_Oxyde_Particular[[2]] <- "El oxigeno es un gas, por lo tanto lleva subindice 2... y faltaría agregar lo que le pasa al otro elemento."
TC_Text_Oxyde_Particular[[3]] <- "Comenzamos con _el_oxido_ con subindices 1."
TC_Text_Oxyde_Particular[[4]] <- "El subindice del _elemento_ sera 2, y el subindice del oxigeno sera _valencia_."
TC_Text_Oxyde_Particular[[5]] <- "En este caso se simplificara por ... o no se simplificara"
TC_Text_Oxyde_Particular[[6]] <- "En este caso colocamos... ... ... explicar!"
TC_Text_Oxyde_Particular[[7]] <- "Para lograrlo, colocamos..."
TC_Text_Oxyde_Particular[[8]] <- "En este caso no es necesario... o si es necesario"
text_oxyde_particular <- do.call(rbind.data.frame, TC_Text_Oxyde_Particular)
entrega_mod <- paste0("$", output[["Level06_LaTeX02"]][,1],  "$")
# entrega_mod <- paste0(" withMathJax(", entrega_mod, ")")
# entreda_mod[1] <- 'You do not see me initially: $$e^{i \\pi} + 1 = 0$$'
# entrega_mod <- rep("$$e^{i \\pi} + 1 = 0$$", 8)
output[[8]] <- cbind.data.frame(entrega_mod,
text_oxyde_general,
text_oxyde_particular)
colnames( output[[8]]) <- c("Steps", "General", "Particular")
names(output)[8] <- "format02_oxyde"
#####################################################
dt_symbol <- DataTC_04_Oxyde$eng$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
colnames(DataTC_04_Oxyde[["eng"]])
dt_symbol <- DataTC_04_Oxyde$eng$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
pos_names <- c("OxydeFullName_Classic", "OxydeFullName_IUPAC",
"OxydeFullName_Stock")
dt_row <- (dt_symbol + dt_selected_valence) == 2
all_oxyde_names <- DataTC_04_Oxyde$eng[dt_row,pos_names]
all_oxyde_names
use_r("Nomenclature_Oxyde")
chem_symbol <- "Fe"
element_valence <- 2
gas_status_element <- TRUE
language <- "esp"
#####################################################
dt_symbol <- DataTC_04_Oxyde$esp$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
pos_names <- c("OxydeFullName_Classic", "OxydeFullName_IUPAC",
"OxydeFullName_Stock")
dt_row <- (dt_symbol + dt_selected_valence) == 2
all_oxyde_names <- DataTC_04_Oxyde$eng[dt_row,pos_names]
all_oxyde_names
#####################################################
dt_symbol <- DataTC_04_Oxyde[[language]]$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
#####################################################
dt_symbol <- DataTC_04_Oxyde[[language]]$Symbol == chem_symbol
dt_selected_valence <- DataTC_04_Oxyde$eng$SelectedValence == element_valence
pos_names <- c("OxydeFullName_Classic", "OxydeFullName_IUPAC",
"OxydeFullName_Stock")
dt_row <- (dt_symbol + dt_selected_valence) == 2
all_oxyde_names <- DataTC_04_Oxyde[[language]][dt_row,pos_names]
all_oxyde_names
all_oxyde_names <- as.vector(all_oxyde_names)
all_oxyde_names
all_oxyde_names <- DataTC_04_Oxyde[[language]][dt_row,pos_names]
all_oxyde_names <- DataTC_04_Oxyde[[language]][dt_row,pos_names]
all_oxyde_names
all_oxyde_names <- DataTC_04_Oxyde[[language]][dt_row,pos_names]
all_oxyde_names <- as.vector(as.matrix(all_oxyde_names))
all_oxyde_names
Resolution_Oxyde(chem_symbol,
element_valence,
gas_status_element,
language)
language <- "esp"
Resolution_Oxyde(chem_symbol,
element_valence,
gas_status_element,
language)
document()
load_all()
Resolution_Oxyde(chem_symbol = "Fe",
element_valence = 3,
gas_status_element = FALSE,
language = "esp")
